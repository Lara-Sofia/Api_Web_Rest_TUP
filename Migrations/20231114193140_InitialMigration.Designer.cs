// <auto-generated />
using System;
using Api.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(CustumerCosultationContext))]
    [Migration("20231114193140_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Api.Entities.Consultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedSupportId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultationState")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupportId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedSupportId");

                    b.HasIndex("CreatorCustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupportId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("Api.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Api.Entities.Customer", b =>
                {
                    b.HasBaseType("Api.Entities.User");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mcelena@gmail.com",
                            LastName = "Elena",
                            Name = "Maria Celia",
                            Password = "123456",
                            UserName = "nbologna"
                        },
                        new
                        {
                            Id = 2,
                            Email = "acura@gmail.com",
                            LastName = "Cura",
                            Name = "Azul",
                            Password = "123456",
                            UserName = "acura"
                        },
                        new
                        {
                            Id = 3,
                            Email = "sguarde@gmail.com",
                            LastName = "Guarde",
                            Name = "Santiago",
                            Password = "123456",
                            UserName = "sguarde"
                        });
                });

            modelBuilder.Entity("Api.Entities.Support", b =>
                {
                    b.HasBaseType("Api.Entities.User");

                    b.HasDiscriminator().HasValue("Support");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "lcristofanelli@gmail.com",
                            LastName = "Cristofanelli",
                            Name = "Lucia",
                            Password = "123456",
                            UserName = "lcristofanelli"
                        },
                        new
                        {
                            Id = 5,
                            Email = "mcurcio@gmail.com",
                            LastName = "Curcio",
                            Name = "Melani",
                            Password = "123456",
                            UserName = "mcurcio"
                        });
                });

            modelBuilder.Entity("Api.Entities.Consultation", b =>
                {
                    b.HasOne("Api.Entities.Support", "AssignedSupport")
                        .WithMany()
                        .HasForeignKey("AssignedSupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CreatorCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Entities.Customer", null)
                        .WithMany("Consultation")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Api.Entities.Support", null)
                        .WithMany("Consultations")
                        .HasForeignKey("SupportId");

                    b.Navigation("AssignedSupport");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Api.Entities.Response", b =>
                {
                    b.HasOne("Api.Entities.Consultation", "Consultation")
                        .WithMany("Responses")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Api.Entities.Consultation", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Api.Entities.Customer", b =>
                {
                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("Api.Entities.Support", b =>
                {
                    b.Navigation("Consultations");
                });
#pragma warning restore 612, 618
        }
    }
}
